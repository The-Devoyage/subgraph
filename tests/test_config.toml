[service]
name = "subgraph_tests"
port = 0
log_level = "debug"

[service.auth]
requesting_party = "localhost"
requesting_party_name = "subgraph_demo"
requesting_party_origin = "http://localhost:8000"
identifier = "email"
data_source = "users_data_source"

# Data Sources
[[service.data_sources]]
[service.data_sources.Mongo]
name = "users_data_source"
uri = "mongodb://subgraph_mongo:subgraph_mongo@127.0.0.1:27017/subgraph_mongo"
db = "subgraph_mongo"

[[service.data_sources]]
[service.data_sources.SQL]
name = "coffee_data_source"
uri = "sqlite:/home/nickisyourfan/Desktop/DEV/@the-devoyage/subgraph/tests/sqlite/subgraph_sqlite.db"
dialect = "SQLITE"

[[service.data_sources]]
[service.data_sources.HTTP]
name = "todos"
url = "https://jsonplaceholder.typicode.com"

[[service.data_sources]]
[service.data_sources.SQL]
name = "comments"
uri = "postgres://root:rootroot@localhost:5432/postgres_db"
dialect = "POSTGRES"

[[service.data_sources]]
[service.data_sources.SQL]
name = "cars"
uri = "mysql://root:rootroot@localhost:3306/mysql_db"
dialect = "MYSQL"

# Entities
[[service.entities]]
name = "user"
fields = [
  { name = "_id", scalar = "ObjectID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"]},
  { name = "name", scalar = "String", required = true },
  { name = "age", scalar = "Int", required = false },
  { name = "married", scalar = "Boolean", required = true },
  { name = "email", scalar = "String", required = true, exclude_from_input = ["UpdateMany"]},
  { name = "address", scalar = "Object", fields = [
    { name = "line_one", scalar = "String", required = true },
    { name = "line_two", scalar = "String" },
    { name = "city", scalar = "String", required = true },
    { name = "state", scalar = "String", required = true },
    { name = "zip", scalar = "String", required = true },
  ] },
]

[[service.entities]]
name = "Coffee"
data_source = { from = "coffee_data_source" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "name", scalar = "String", required = true },
  { name = "price", scalar = "Int", required = true },
  { name = "available", scalar = "Boolean", required = true }
]

[[service.entities]]
name = "todo"
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "userId", scalar = "Int", required = true },
  { name = "title", scalar = "String", required = true  },
  { name = "completed", scalar = "Boolean", required = true }
]
[service.entities.data_source]
from = "todos"
path = "/todos"
[service.entities.data_source.resolvers]
[service.entities.data_source.resolvers.find_one]
path = "/:id"
search_query = [["userId", ":userId"], ["title", ":title"]]
[service.entities.data_source.resolvers.find_many]
search_query = [["userId", ":userId"], ["completed", ":completed"], ["id", ":id"]]

[[service.entities]]
name = "Comment"
data_source = { from = "comments", table = "comments" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "content", scalar = "String", required = true },
  { name = "status", scalar = "Boolean", required = true}
]

[[service.entities]]
name = "Car"
data_source = { from = "cars", table = "cars" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "model", scalar = "String", required = true },
  { name = "price", scalar = "Int", required = true },
  { name = "status", scalar = "Boolean", required = true }
]

[[service.entities]]
name = "Beer"
fields = [
  { name = "_id", scalar = "ObjectID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "name", scalar = "String", required = true },
  { name = "ratings", scalar = "Int", required = true, list = true },
  { name = "brand", scalar = "Object", required = true, fields = [
    { name = "name", scalar = "String", required = true },
  ]}
]

[[service.entities]]
name = "Dog"
fields = [
  { name = "_id", scalar = "ObjectID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "name", scalar = "String", required = true },
  { name = "age", scalar = "Int", required = true },
  { name = "owner", scalar = "ObjectID", as_type = "user", join_on = "_id" },
  { name = "fav_car", scalar = "Int", as_type = "Car", join_on = "id" },
  { name = "fav_coffee", scalar = "Int", as_type = "Coffee", join_on = "id" },
  { name = "todo", scalar = "Int", as_type = "todo", join_on = "id" },
  { name = "comments", scalar = "Int", as_type = "Comment", join_on = "id", list = true },
]

# [[service.entities]]
# name = "account"
# [[service.entities.fields]]
# name = "_id"
# scalar = "ObjectID"
# required = true
# exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"]
# [[service.entities.fields]]
# name = "email"
# scalar = "String"
# required = true
# exclude_from_output = true
# [[service.entities.fields]]
# name = "password"
# scalar = "String"
# required = true
# exclude_from_output = true
# exclude_from_input = [
#   "FindOne",
#   "FindMany",
#   "UpdateManyQuery",
#   "UpdateOneQuery",
#   "UpdateMany"
# ]
# [[service.entities.fields]]
# name = "auth_token"
# scalar = "Object"
# exclude_from_input = [
#   "FindOne",
#   "FindMany",
#   "UpdateManyQuery",
#   "UpdateOneQuery",
#   "UpdateMany",
#   "UpdateOne",
#   "CreateOne"
# ]
# fields = [
#   { name = "user", scalar = "String", required = true, as_type = "user", join_on = "email" },
# ]


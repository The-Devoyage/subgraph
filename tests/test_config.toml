[service]
service_name = "subgraph_tests"
port = 0
log_level = "debug"

# Data Sources
[[service.data_sources]]
[service.data_sources.Mongo]
name = "users_data_source"
uri = "mongodb://subgraph_mongo:subgraph_mongo@127.0.0.1:27017/subgraph_mongo"
db = "subgraph_mongo"

[[service.data_sources]]
[service.data_sources.SQL]
name = "coffee_data_source"
uri = "sqlite:/home/nickisyourfan/Desktop/DEV/@the-devoyage/subgraph/tests/sqlite/subgraph_sqlite.db"
dialect = "SQLITE"

[[service.data_sources]]
[service.data_sources.HTTP]
name = "todos"
url = "https://jsonplaceholder.typicode.com"

[[service.data_sources]]
[service.data_sources.SQL]
name = "comments"
uri = "postgres://root:rootroot@localhost:5432/postgres_db"
dialect = "POSTGRES"

[[service.data_sources]]
[service.data_sources.SQL]
name = "cars"
uri = "mysql://root:rootroot@localhost:3306/mysql_db"
dialect = "MYSQL"

# Entities
[[service.entities]]
name = "user"
fields = [
  { name = "_id", scalar = "ObjectID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"]},
  { name = "name", scalar = "String", required = true },
  { name = "age", scalar = "Int", required = false },
  { name = "married", scalar = "Boolean", required = true }
]

[[service.entities]]
name = "Coffee"
data_source = { from = "coffee_data_source" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "name", scalar = "String", required = true },
  { name = "price", scalar = "Int", required = true },
  { name = "available", scalar = "Boolean", required = true }
]

[[service.entities]]
name = "todo"
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "userId", scalar = "Int", required = true },
  { name = "title", scalar = "String", required = true  },
  { name = "completed", scalar = "Boolean", required = true }
]
[service.entities.data_source]
from = "todos"
path = "/todos"
[service.entities.data_source.resolvers]
[service.entities.data_source.resolvers.find_one]
path = "/:id"
search_query = [["userId", ":userId"], ["title", ":title"]]
[service.entities.data_source.resolvers.find_many]
search_query = [["userId", ":userId"], ["completed", ":completed"], ["id", ":id"]]

[[service.entities]]
name = "Comment"
data_source = { from = "comments", table = "comments" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "content", scalar = "String", required = true },
  { name = "status", scalar = "Boolean", required = true}
]

[[service.entities]]
name = "Car"
data_source = { from = "cars", table = "cars" }
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "model", scalar = "String", required = true },
  { name = "price", scalar = "Int", required = true },
  { name = "status", scalar = "Boolean", required = true }
]
